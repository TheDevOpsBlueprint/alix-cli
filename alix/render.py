import re
from difflib import SequenceMatcher

from typing import Any, List, Literal, Union

from rich.table import Table
from rich.console import Console
from rich.text import Text
from rich import box

class Render:
    def _split_keep_ws(self, s: str) -> List[Union[str, Any]]:
        return re.split(r'(\s+)', s)

    def _word_level_text(self, left: str, right: str, side: Literal["left", "right"]) -> Text:
        """
        Give color-coded output for additions/deletions using rich.Text,
        with token highlight base on the left vs right comparison.
        """
        if side not in ("left", "right"):
            raise ValueError("side must be 'left' or 'right'")

        left_tokens = self._split_keep_ws(left)
        right_tokens = self._split_keep_ws(right)
        sm = SequenceMatcher(None, left_tokens, right_tokens)
        out = Text(justify="left")
        for tag, i1, i2, j1, j2 in sm.get_opcodes():
            if tag == "equal":
                tokens = left_tokens[i1:i2] if side == "left" else right_tokens[j1:j2]
                for t in tokens:
                    out.append(t)
            elif tag == "replace":
                tokens = left_tokens[i1:i2] if side == "left" else right_tokens[j1:j2]
                color = "red" if side == "left" else "green"
                for t in tokens:
                    out.append(t, style=f"bold {color}")
            elif tag == "delete" and side == "left":
                for t in left_tokens[i1:i2]:
                    out.append(t, style="bold red")
            elif tag == "insert" and side == "right":
                for t in right_tokens[j1:j2]:
                    out.append(t, style="bold green")
        return out

    def side_by_side_diff(self, old: str, new: str) -> None:
        """
        Render a table showing side-by-side difference between current config vs purposed config
        """
        old_lines = old.splitlines()
        new_lines = new.splitlines()
        sm = SequenceMatcher(None, old_lines, new_lines)

        table = Table(show_header=True, header_style="bold cyan", expand=True, box=box.ROUNDED)
        table.add_column("Current Config", overflow="fold", justify="center")
        table.add_column("Purpose Config", overflow="fold", justify='center')

        for tag, i1, i2, j1, j2 in sm.get_opcodes():
            if tag == "equal":
                for a_i, b_j in zip(range(i1, i2), range(j1, j2)):
                    table.add_row(Text(old_lines[a_i], justify='left'), Text(new_lines[b_j], justify='left'))
            elif tag == "replace":
                n = max(i2 - i1, j2 - j1)
                for k in range(n):
                    left_line = old_lines[i1 + k] if i1 + k < i2 else ""
                    right_line = new_lines[j1 + k] if j1 + k < j2 else ""
                    left_txt = self._word_level_text(left_line, right_line, side="left")
                    right_txt = self._word_level_text(left_line, right_line, side="right")
                    table.add_row(left_txt, right_txt)
            elif tag == "delete":
                for a_i in range(i1, i2):
                    table.add_row(Text(old_lines[a_i], style="bold red", justify='left'), Text(""))
            elif tag == "insert":
                for b_j in range(j1, j2):
                    table.add_row(Text(""), Text(new_lines[b_j], style="bold green", justify="left"))

        console = Console()
        console.print(table)


if __name__ == "__main__":
    old = """# === ALIX MANAGED ALIASES START ===
# Generated by alix on 2025-10-01 23:16:56
alias gs='git status'
# === ALIX MANAGED ALIASES END ===
"""

    new = """# === ALIX MANAGED ALIASES START ===
# Generated by alix on 2025-10-02 11:36:56
alias gs='git status'
alias dl='docker ps'
# === ALIX MANAGED ALIASES END ===
"""
    render = Render()
    render.side_by_side_diff(old, new)